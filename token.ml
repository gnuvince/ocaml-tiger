open Parser

let rec to_string = function
  | T_eof              -> "T_eof"
  | T_kw_array         -> "array"
  | T_kw_break         -> "break"
  | T_kw_do            -> "do"
  | T_kw_else          -> "else"
  | T_kw_end           -> "end"
  | T_kw_for           -> "for"
  | T_kw_function      -> "function"
  | T_kw_if            -> "if"
  | T_kw_in            -> "in"
  | T_kw_let           -> "let"
  | T_kw_nil           -> "nil"
  | T_kw_of            -> "of"
  | T_kw_then          -> "then"
  | T_kw_to            -> "to"
  | T_kw_type          -> "type"
  | T_kw_var           -> "var"
  | T_kw_while         -> "while"
  | T_sym_ampersand    -> "&"
  | T_sym_colon        -> ":"
  | T_sym_colon_eq     -> ":="
  | T_sym_divide       -> "/"
  | T_sym_lbrace       -> "{"
  | T_sym_lbracket     -> "["
  | T_sym_lparen       -> "("
  | T_sym_minus        -> "-"
  | T_sym_modulo       -> "%"
  | T_sym_pipe         -> "|"
  | T_sym_plus         -> "+"
  | T_sym_rbrace       -> "}"
  | T_sym_rbracket     -> "]"
  | T_sym_rparen       -> ")"
  | T_sym_semicolon    -> ";"
  | T_sym_times        -> "*"
  | T_sym_lt           -> "<"
  | T_sym_le           -> "<="
  | T_sym_eq           -> "="
  | T_sym_neq          -> "<>"
  | T_sym_ge           -> ">="
  | T_sym_gt           -> ">"
  | T_sym_dot          -> "."
  | T_sym_comma        -> ","
  | T_lit_int n        -> string_of_int n
  | T_lit_string s     -> Printf.sprintf "\"%s\"" (String.escaped s)
  | T_ident id         -> id
